# Debian implementation for Packager

action_get_pkg_dir()           { echo "${PACKAGER_DIR}/debuild"; }
action_list_packages_jubatus() { echo "jubatus jubatus-client"; }
action_list_packages_others()  { echo "pficommon glog re2 ux"; }

@require_commands grep awk
action_list_subpackages() {
    for PKG in "${@}"; do
        grep "^Package:" "${PACKAGER_PKG_DIR}/${PKG}/debian/control" | awk '{print $2}'
    done
}

action_check_environment() {
    export DEBEMAIL="jubatus@googlegroups.com"
    export DEBFULLNAME="PFI & NTT"
}

@require_commands rm
action_clean() {
    rm -rf "${PACKAGER_PKG_DIR}"/*/{BUILD,DEBS}
}

@require_commands rm
action_clean_all() {
    action_clean
    rm -rf "${PACKAGER_PKG_DIR}"/*/SOURCES
}

@require_commands sudo apt-get
action_uninstall_packages() {
    for PKG in "${@}"; do
        sudo apt-get -y purge "${PKG}" || echo "Notice from Packager Tool: 'Unable to locate package' message can be safely ignored."
    done
}

@require_commands mkdir rm git tar cp mv hg dch debuild sudo dpkg
action_build_package() {
    PACKAGE="${1}"; shift
    AUTO_INSTALL="${1}"; shift

    SOURCES_DIR="${PACKAGER_PKG_DIR}/${PACKAGE}/SOURCES"
    BUILD_DIR="${PACKAGER_PKG_DIR}/${PACKAGE}/BUILD"
    DEBS_DIR="${PACKAGER_PKG_DIR}/${PACKAGE}/DEBS"
    DEBIAN_DIR="${PACKAGER_PKG_DIR}/${PACKAGE}/debian"

    rm -rf "${BUILD_DIR}"
    mkdir -p "${SOURCES_DIR}" "${BUILD_DIR}" "${DEBS_DIR}"

    # Expand variables
    for VARNAME in VERSION RELEASE URL URL_TYPE CHECKOUT IS_SNAPSHOT ARCHIVE_DIR; do
        EXPAND_VARNAME="PKG_${PACKAGE//-/_}_${VARNAME}"
        if [ ! -z "${!EXPAND_VARNAME:-}" ]; then
            local $VARNAME="${!EXPAND_VARNAME}"
        fi
    done

    # Download to SOURCES_DIR and expand in BUILD_DIR
    case "${PACKAGE}" in
        jubatus )
            _build_common_vcs
            ;;
        jubatus-client )
            _build_common

            pushd "${BUILD_DIR}"
            mv "${ARCHIVE_DIR}" "${PACKAGE}-${VERSION}"
            popd
            ;;
        pficommon )
            _build_common_vcs
            ;;
        glog )
            _build_common
            ;;
        re2 )
            _build_common_vcs
            ;;
        ux )
            _build_common

            pushd "${BUILD_DIR}"
            pushd "ux-${VERSION}"
            unpack_waf
            popd
            rm -f "ux_${VERSION}.orig.tar.bz2"
            tar cjf "ux_${VERSION}.orig.tar.bz2" "ux-${VERSION}"
            popd
            ;;
        * )
            echo "Unknown package: ${PACKAGE}"
            return 1
    esac

    # Check for `copyright` changes
    COPYRIGHT_COMMENT="$(grep "^Comment:" "${DEBIAN_DIR}/copyright")" && (
        COPYRIGHT_TEST_COMMAND="$(echo "${COPYRIGHT_COMMENT}" | awk '{print $2}')"
        COPYRIGHT_TEST_EXPECTED="$(echo "${COPYRIGHT_COMMENT}" | awk '{print $3}')"
        COPYRIGHT_TEST_TARGET="$(echo "${COPYRIGHT_COMMENT}" | awk '{print $4}')"
        COPYRIHGT_TEST_ACTUAL="$("${COPYRIGHT_TEST_COMMAND}" "${BUILD_DIR}/${PACKAGE}-${VERSION}/${COPYRIGHT_TEST_TARGET}" | awk '{print $1}')"
        if [ "${COPYRIGHT_TEST_EXPECTED}" != "${COPYRIHGT_TEST_ACTUAL}" ]; then
            echo "ERROR: Copyright checksum mismatch: ${COPYRIGHT_TEST_TARGET}"
            echo "Review and update ${DEBIAN_DIR}/copyright file."
            return 1
        fi
    )

    # Copy `debian/` directory
    cp -a "${DEBIAN_DIR}" "${BUILD_DIR}/${PACKAGE}-${VERSION}"

    # Generate `changelog` and build
    pushd "${BUILD_DIR}/${PACKAGE}-${VERSION}"
    dch --create --package "${PACKAGE}" --newversion "${VERSION}-${RELEASE}" --distribution unstable --force-distribution "Generated by Automatic Packager"
    debuild -uc -us
    popd

    # Install and move packages
    pushd "${BUILD_DIR}"
    if [ "${AUTO_INSTALL}" = "yes" ]; then
        sudo dpkg -i *_${VERSION}-${RELEASE}_*.deb
    fi
    mv *.deb *.dsc *.changes *.build *.tar.gz "${DEBS_DIR}"
    popd
}

@require_commands cp tar
_build_common() {
    pushd "${SOURCES_DIR}"
    download "${URL}"
    cp "$(basename "${URL}")" "${BUILD_DIR}/${PACKAGE}_${VERSION}.orig.${URL_TYPE}"
    popd

    pushd "${BUILD_DIR}"
    tar xf "${PACKAGE}_${VERSION}.orig.${URL_TYPE}"
    popd
}

@require_commands rm git hg mv tar
_build_common_vcs() {
    pushd "${BUILD_DIR}"
    rm -rf "${PACKAGE}"

    COMMIT_DATE=""
    case "${URL_TYPE}" in
        git )
            git clone "${URL}" "${PACKAGE}"
            pushd "${PACKAGE}"
            git checkout "${CHECKOUT}" &> /dev/null
            COMMIT_DATE="$(get_commit_date_git)"
            popd
            ;;
        hg )
            hg clone -u "${CHECKOUT}" "${URL}" re2
            pushd "${PACKAGE}"
            COMMIT_DATE="$(get_commit_date_hg)"
            popd
            ;;
        * )
            echo "Unsupported VCS set in URL_TYPE: ${URL_TYPE}"
            return 1
    esac

    pushd "${PACKAGE}"
    if [ -x ./waf ]; then unpack_waf; fi
    if [ "${IS_SNAPSHOT}" = "yes" ]; then
        VERSION="${VERSION}+${URL_TYPE}${COMMIT_DATE}"
    fi
    rm -rf .${URL_TYPE}
    popd

    mv "${PACKAGE}" "${PACKAGE}-${VERSION}"
    tar czf "${PACKAGE}_${VERSION}.orig.tar.gz" "${PACKAGE}-${VERSION}"
    popd
}
